#!/bin/bash

# Script de monitoramento para containers Docker
set -e

# Cores para output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

# Fun√ß√£o para mostrar status dos containers
show_status() {
    echo
    info "üìä Status dos Containers:"
    echo "=========================="
    docker-compose -f docker-compose.prod.yml ps
}

# Fun√ß√£o para mostrar uso de recursos
show_resources() {
    echo
    info "üíª Uso de Recursos:"
    echo "==================="
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}"
}

# Fun√ß√£o para mostrar logs recentes
show_logs() {
    local service=${1:-""}
    echo
    if [ -z "$service" ]; then
        info "üìã Logs Recentes (Todos os Servi√ßos):"
        echo "====================================="
        docker-compose -f docker-compose.prod.yml logs --tail=20 --timestamps
    else
        info "üìã Logs Recentes ($service):"
        echo "============================="
        docker-compose -f docker-compose.prod.yml logs --tail=50 --timestamps "$service"
    fi
}

# Fun√ß√£o para verificar sa√∫de dos servi√ßos
check_health() {
    echo
    info "üè• Verifica√ß√£o de Sa√∫de:"
    echo "========================"
    
    # Verificar API
    if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
        log "‚úÖ API: Saud√°vel"
    else
        error "‚ùå API: N√£o responsiva"
    fi
    
    # Verificar Nginx
    if curl -f -s http://localhost/ > /dev/null 2>&1; then
        log "‚úÖ Nginx: Saud√°vel"
    else
        error "‚ùå Nginx: N√£o responsiva"
    fi
    
    # Verificar Redis
    if docker-compose -f docker-compose.prod.yml exec -T redis redis-cli ping > /dev/null 2>&1; then
        log "‚úÖ Redis: Saud√°vel"
    else
        error "‚ùå Redis: N√£o responsiva"
    fi
}

# Fun√ß√£o para mostrar informa√ß√µes do sistema
show_system_info() {
    echo
    info "üñ•Ô∏è  Informa√ß√µes do Sistema:"
    echo "==========================="
    echo "Uptime: $(uptime -p)"
    echo "Load Average: $(uptime | awk -F'load average:' '{print $2}')"
    echo "Mem√≥ria: $(free -h | grep '^Mem:' | awk '{print $3 "/" $2 " (" $3/$2*100 "%)"}')"
    echo "Disco: $(df -h / | tail -1 | awk '{print $3 "/" $2 " (" $5 ")"}')"
    echo "Docker: $(docker --version)"
}

# Fun√ß√£o para mostrar estat√≠sticas de rede
show_network_stats() {
    echo
    info "üåê Estat√≠sticas de Rede:"
    echo "========================"
    docker network ls | grep trade
    echo
    docker-compose -f docker-compose.prod.yml exec -T nginx cat /var/log/nginx/access.log | tail -10 2>/dev/null || warn "Logs do Nginx n√£o dispon√≠veis"
}

# Fun√ß√£o para verificar atualiza√ß√µes
check_updates() {
    echo
    info "üîÑ Verificando Atualiza√ß√µes:"
    echo "============================"
    
    # Verificar se h√° commits novos
    if git status --porcelain | grep -q .; then
        warn "‚ö†Ô∏è  H√° altera√ß√µes locais n√£o commitadas"
    fi
    
    git fetch origin main 2>/dev/null || warn "N√£o foi poss√≠vel verificar atualiza√ß√µes remotas"
    
    LOCAL=$(git rev-parse HEAD)
    REMOTE=$(git rev-parse origin/main 2>/dev/null || echo "unknown")
    
    if [ "$LOCAL" != "$REMOTE" ] && [ "$REMOTE" != "unknown" ]; then
        warn "üîÑ H√° atualiza√ß√µes dispon√≠veis no reposit√≥rio"
        echo "   Para atualizar: git pull && ./scripts/deploy.sh"
    else
        log "‚úÖ C√≥digo est√° atualizado"
    fi
}

# Menu principal
show_menu() {
    echo
    info "üîß Monitor Trade NB Members"
    echo "==========================="
    echo "1) Status dos containers"
    echo "2) Uso de recursos"
    echo "3) Logs (todos os servi√ßos)"
    echo "4) Logs da API"
    echo "5) Logs do Bot"
    echo "6) Logs do Nginx"
    echo "7) Verificar sa√∫de"
    echo "8) Informa√ß√µes do sistema"
    echo "9) Estat√≠sticas de rede"
    echo "10) Verificar atualiza√ß√µes"
    echo "11) Monitoramento cont√≠nuo"
    echo "0) Sair"
    echo
}

# Monitoramento cont√≠nuo
continuous_monitor() {
    echo
    info "üîÑ Monitoramento Cont√≠nuo (Ctrl+C para sair)"
    echo "============================================="
    
    while true; do
        clear
        echo "$(date)"
        show_status
        show_resources
        check_health
        echo
        info "Pr√≥xima atualiza√ß√£o em 30 segundos..."
        sleep 30
    done
}

# Verificar se est√° no diret√≥rio correto
if [ ! -f "docker-compose.prod.yml" ]; then
    error "Arquivo docker-compose.prod.yml n√£o encontrado!"
    error "Execute este script no diret√≥rio raiz do projeto."
    exit 1
fi

# Menu interativo ou comando direto
if [ $# -eq 0 ]; then
    while true; do
        show_menu
        read -p "Escolha uma op√ß√£o: " choice
        
        case $choice in
            1) show_status ;;
            2) show_resources ;;
            3) show_logs ;;
            4) show_logs "trade-api" ;;
            5) show_logs "trade-bot" ;;
            6) show_logs "nginx" ;;
            7) check_health ;;
            8) show_system_info ;;
            9) show_network_stats ;;
            10) check_updates ;;
            11) continuous_monitor ;;
            0) log "üëã Saindo..."; exit 0 ;;
            *) error "Op√ß√£o inv√°lida!" ;;
        esac
        
        echo
        read -p "Pressione Enter para continuar..."
    done
else
    # Executar comando espec√≠fico
    case $1 in
        "status") show_status ;;
        "resources") show_resources ;;
        "logs") show_logs "$2" ;;
        "health") check_health ;;
        "system") show_system_info ;;
        "network") show_network_stats ;;
        "updates") check_updates ;;
        "monitor") continuous_monitor ;;
        *) 
            error "Comando inv√°lido: $1"
            echo "Comandos dispon√≠veis: status, resources, logs, health, system, network, updates, monitor"
            exit 1
            ;;
    esac
fi